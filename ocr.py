# -*- coding: utf-8 -*-
"""OCR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OuKIkBPSjlpzM4aUeGgjcxqjC9Ca0A2D
"""

!pip install easyocr

!pip install -q streamlit

import re
import easyocr
import PIL
from PIL import ImageDraw
import sqlite3
conn = sqlite3.connect('database.db')
cursor = conn.cursor()
print(conn)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile strim.py
# import pandas as pd
# import streamlit as st
# import re
# import json
# import easyocr
# import PIL
# from PIL import ImageDraw
# import sqlite3
# conn = sqlite3.connect('database.db')
# cursor = conn.cursor()
# print(conn)
# reader = easyocr.Reader(['th','en'])
# company_name_re = r'(?:[A-Z][a-z]+\s*){1,3}(?:LLC|Inc|Corporation|Co|Ltd)'
# name_re = r'[A-Z][a-z]+\s[A-Z][a-z]+'
# designation_re = r'\b([A-Z][a-z]+\s*){1,3}\b(?:Manager|Director|President|Vice President|CEO|CTO|CFO|COO|CIO|Chief|Partner|Founder|Owner|Manager|Officer|Chairman|Secretary|Treasurer)'
# mobile_number_re = r'(?:\d{3}[-\.\s]??\d{3}[-\.\s]??\d{4}|\(\d{3}\)\s*\d{3}[-\.\s]??\d{4}|\d{10})'
# email_re = r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+'
# website_re = r'(?:https?://)?(?:www\.)?[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+'
# address_re = r'([0-9]+\s)?([A-Z][a-z]+\s)+[A-Z]{2}\s\d{5}'
# def extract_info(text):
#     output = {}
#     # Extract company name
#     company_name = re.search(company_name_re, text)
#     if company_name:
#         output['company_name'] = company_name.group()
#     else:
#         company_name = None
# 
#     # Extract name
#     name = re.search(name_re, text)
#     if name:
#         output['name'] = name.group()
#     else:
#         name = None
# 
#     # Extract designation
#     designation = re.search(designation_re, text)
#     if designation:
#         output['designation'] = designation.group()
#     else:
#         designation = None
# 
#     # Extract mobile number
#     mobile_number = re.search(mobile_number_re, text)
#     if mobile_number:
#         output['mobile_number'] = mobile_number.group()
#     else:
#         mobile_number = None
# 
#     # Extract email address
#     email = re.search(email_re, text)
#     if email:
#         output['email'] = email.group()
#     else:
#         email = None
# 
#         # Extract website URL
#     website = re.search(website_re, text)
#     if website:
#         output['website'] = website.group()
#     else:
#         website = None
# 
#     # Extract address
#     address = re.search(address_re, text)
#     if address:
#         output['address'] = address.group()
#     else:
#         address = None
# 
#     return output
# 
# 
# #extract_info(text)
# 
# st.set_page_config(page_title='ðŸ’³BizCardX: Extracting Business Card Data with OCR',
#                   # page_icon=,
#                    layout='wide')
# st.sidebar.image("biz.gif", width=400)
# selected =st.sidebar.selectbox('ðŸ“’Welcome to BizCardX',('HOMEPAGE', 'SEND YOUR CARD', 'DOWNLOAD', 'ABOUT'))
# #def play_video(video_path):
#  #   video_file = open(video_path, 'rb')
#   #  video_bytes = video_file.read()
#    # st.video(video_bytes)
# if selected == 'HOMEPAGE':
#     st.header('ðŸ’³BizCardX: Extracting Business Card Data with OCR')
# 
#     st.subheader('PURPOSE : Business Card Data Extraction')
#     st.image("BusinessCardSDK_Banner.png")
#     st.write('''A business card scanner makes uploading data from paper business cards, in volume, 
#              easier than typing that data. A business card scanning app can extract, classify and translate multilingual data
#               from paper business cards via the deviceâ€™s internal camera. Once the business card scanner has extracted the data,
#               users can import the data into their contact manager or a CRM system.''')
#     st.subheader("OUR KEY-POINTS")
#     st.write('''1. OCR technology: Extract business card data with ease using our state-of-the-art OCR technology.''')
#     st.write('''2. Editable data: Easily update and edit your contact information as needed.''')
#     st.write('''3. Data upload and secure storage: Upload your business card data securely to our database for safekeeping.''')
#     st.write('''4. Download in JSON format: Download your business card data in JSON format for easy integration with other software applications.''')
# 
# elif selected == 'SEND YOUR CARD':
#     st.subheader('Lets Upload Your card')
#     file = st.file_uploader("Choose Your Image",
#                      accept_multiple_files=False,
#                      type=['png', 'jpg', 'jpeg'],
#                      label_visibility="visible")
#     if file is not None:
#       im = PIL.Image.open(file)
#       st.image(im, width=400)
#       if st.button("Extract Info"):
#         with open(file, 'rb') as f:
#           image_bytes = f.read()
#         bounds = reader.readtext(image_bytes)
#         if len(bounds) > 0:
# 
#         # text extraction is successful
#           text = '\n'.join([r[1] for r in bounds])
#           print(f"text type: {type(text)}")
#           extract_info(text)
#           st.write("Data extracted successfully!")
#         else:
#         # text extraction failed
#           st.write("The OCR engine could not recognize any text in the uploaded image. Please try again with a different image.")
# 
# 
# elif st.button("View Data"):
#             #  company_name, name, designation, mobile_number, email, website, address = extract_info()
#              # st.subheader("Extracted Information")
#             #  st.write(f"Company Name: {company_name}")
#             #  st.write(f"Card Holder Name: {name}")
#             #  st.write(f"Designation: {designation}")
#             #  st.write(f"Mobile Number: {mobile_number}")
#             #  st.write(f"Email Address: {email}")
#             #  st.write(f"Website URL: {website}")
#             #  st.write(f"Address: {address}")
#             # Extract information from text
#             info = extract_info(text)
# 
#             # Create Pandas DataFrame
#             df = pd.DataFrame.from_dict(info, orient='index', columns=['value'])
# 
#             # Display DataFrame
#             st.write(df)
# 
# 
#

!npm install localtunnel

!streamlit run /content/strim.py &>/content/logs.txt &

!npx localtunnel --port 8501